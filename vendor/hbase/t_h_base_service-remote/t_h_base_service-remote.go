// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"hbase"
)

var _ = hbase.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  bool exists(string table, TGet tget)")
  fmt.Fprintln(os.Stderr, "   existsAll(string table,  tgets)")
  fmt.Fprintln(os.Stderr, "  TResult get(string table, TGet tget)")
  fmt.Fprintln(os.Stderr, "   getMultiple(string table,  tgets)")
  fmt.Fprintln(os.Stderr, "  void put(string table, TPut tput)")
  fmt.Fprintln(os.Stderr, "  bool checkAndPut(string table, string row, string family, string qualifier, string value, TPut tput)")
  fmt.Fprintln(os.Stderr, "  void putMultiple(string table,  tputs)")
  fmt.Fprintln(os.Stderr, "  void deleteSingle(string table, TDelete tdelete)")
  fmt.Fprintln(os.Stderr, "   deleteMultiple(string table,  tdeletes)")
  fmt.Fprintln(os.Stderr, "  bool checkAndDelete(string table, string row, string family, string qualifier, string value, TDelete tdelete)")
  fmt.Fprintln(os.Stderr, "  TResult increment(string table, TIncrement tincrement)")
  fmt.Fprintln(os.Stderr, "  TResult append(string table, TAppend tappend)")
  fmt.Fprintln(os.Stderr, "  i32 openScanner(string table, TScan tscan)")
  fmt.Fprintln(os.Stderr, "   getScannerRows(i32 scannerId, i32 numRows)")
  fmt.Fprintln(os.Stderr, "  void closeScanner(i32 scannerId)")
  fmt.Fprintln(os.Stderr, "  void mutateRow(string table, TRowMutations trowMutations)")
  fmt.Fprintln(os.Stderr, "   getScannerResults(string table, TScan tscan, i32 numRows)")
  fmt.Fprintln(os.Stderr, "  THRegionLocation getRegionLocation(string table, string row, bool reload)")
  fmt.Fprintln(os.Stderr, "   getAllRegionLocations(string table)")
  fmt.Fprintln(os.Stderr, "  bool checkAndMutate(string table, string row, string family, string qualifier, TCompareOperator compareOperator, string value, TRowMutations rowMutations)")
  fmt.Fprintln(os.Stderr, "  TTableDescriptor getTableDescriptor(TTableName table)")
  fmt.Fprintln(os.Stderr, "   getTableDescriptors( tables)")
  fmt.Fprintln(os.Stderr, "  bool tableExists(TTableName tableName)")
  fmt.Fprintln(os.Stderr, "   getTableDescriptorsByPattern(string regex, bool includeSysTables)")
  fmt.Fprintln(os.Stderr, "   getTableDescriptorsByNamespace(string name)")
  fmt.Fprintln(os.Stderr, "   getTableNamesByPattern(string regex, bool includeSysTables)")
  fmt.Fprintln(os.Stderr, "   getTableNamesByNamespace(string name)")
  fmt.Fprintln(os.Stderr, "  void createTable(TTableDescriptor desc,  splitKeys)")
  fmt.Fprintln(os.Stderr, "  void deleteTable(TTableName tableName)")
  fmt.Fprintln(os.Stderr, "  void truncateTable(TTableName tableName, bool preserveSplits)")
  fmt.Fprintln(os.Stderr, "  void enableTable(TTableName tableName)")
  fmt.Fprintln(os.Stderr, "  void disableTable(TTableName tableName)")
  fmt.Fprintln(os.Stderr, "  bool isTableEnabled(TTableName tableName)")
  fmt.Fprintln(os.Stderr, "  bool isTableDisabled(TTableName tableName)")
  fmt.Fprintln(os.Stderr, "  bool isTableAvailable(TTableName tableName)")
  fmt.Fprintln(os.Stderr, "  bool isTableAvailableWithSplit(TTableName tableName,  splitKeys)")
  fmt.Fprintln(os.Stderr, "  void addColumnFamily(TTableName tableName, TColumnFamilyDescriptor column)")
  fmt.Fprintln(os.Stderr, "  void deleteColumnFamily(TTableName tableName, string column)")
  fmt.Fprintln(os.Stderr, "  void modifyColumnFamily(TTableName tableName, TColumnFamilyDescriptor column)")
  fmt.Fprintln(os.Stderr, "  void modifyTable(TTableDescriptor desc)")
  fmt.Fprintln(os.Stderr, "  void createNamespace(TNamespaceDescriptor namespaceDesc)")
  fmt.Fprintln(os.Stderr, "  void modifyNamespace(TNamespaceDescriptor namespaceDesc)")
  fmt.Fprintln(os.Stderr, "  void deleteNamespace(string name)")
  fmt.Fprintln(os.Stderr, "  TNamespaceDescriptor getNamespaceDescriptor(string name)")
  fmt.Fprintln(os.Stderr, "   listNamespaceDescriptors()")
  fmt.Fprintln(os.Stderr, "   listNamespaces()")
  fmt.Fprintln(os.Stderr, "  TThriftServerType getThriftServerType()")
  fmt.Fprintln(os.Stderr, "  string getClusterId()")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := hbase.NewTHBaseServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "exists":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Exists requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg151 := flag.Arg(2)
    mbTrans152 := thrift.NewTMemoryBufferLen(len(arg151))
    defer mbTrans152.Close()
    _, err153 := mbTrans152.WriteString(arg151)
    if err153 != nil {
      Usage()
      return
    }
    factory154 := thrift.NewTJSONProtocolFactory()
    jsProt155 := factory154.GetProtocol(mbTrans152)
    argvalue1 := hbase.NewTGet()
    err156 := argvalue1.Read(jsProt155)
    if err156 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Exists(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "existsAll":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExistsAll requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg158 := flag.Arg(2)
    mbTrans159 := thrift.NewTMemoryBufferLen(len(arg158))
    defer mbTrans159.Close()
    _, err160 := mbTrans159.WriteString(arg158)
    if err160 != nil { 
      Usage()
      return
    }
    factory161 := thrift.NewTJSONProtocolFactory()
    jsProt162 := factory161.GetProtocol(mbTrans159)
    containerStruct1 := hbase.NewTHBaseServiceExistsAllArgs()
    err163 := containerStruct1.ReadField2(jsProt162)
    if err163 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Tgets
    value1 := argvalue1
    fmt.Print(client.ExistsAll(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "get":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Get requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg165 := flag.Arg(2)
    mbTrans166 := thrift.NewTMemoryBufferLen(len(arg165))
    defer mbTrans166.Close()
    _, err167 := mbTrans166.WriteString(arg165)
    if err167 != nil {
      Usage()
      return
    }
    factory168 := thrift.NewTJSONProtocolFactory()
    jsProt169 := factory168.GetProtocol(mbTrans166)
    argvalue1 := hbase.NewTGet()
    err170 := argvalue1.Read(jsProt169)
    if err170 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Get(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getMultiple":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetMultiple requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg172 := flag.Arg(2)
    mbTrans173 := thrift.NewTMemoryBufferLen(len(arg172))
    defer mbTrans173.Close()
    _, err174 := mbTrans173.WriteString(arg172)
    if err174 != nil { 
      Usage()
      return
    }
    factory175 := thrift.NewTJSONProtocolFactory()
    jsProt176 := factory175.GetProtocol(mbTrans173)
    containerStruct1 := hbase.NewTHBaseServiceGetMultipleArgs()
    err177 := containerStruct1.ReadField2(jsProt176)
    if err177 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Tgets
    value1 := argvalue1
    fmt.Print(client.GetMultiple(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "put":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Put requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg179 := flag.Arg(2)
    mbTrans180 := thrift.NewTMemoryBufferLen(len(arg179))
    defer mbTrans180.Close()
    _, err181 := mbTrans180.WriteString(arg179)
    if err181 != nil {
      Usage()
      return
    }
    factory182 := thrift.NewTJSONProtocolFactory()
    jsProt183 := factory182.GetProtocol(mbTrans180)
    argvalue1 := hbase.NewTPut()
    err184 := argvalue1.Read(jsProt183)
    if err184 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Put(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "checkAndPut":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "CheckAndPut requires 6 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    arg190 := flag.Arg(6)
    mbTrans191 := thrift.NewTMemoryBufferLen(len(arg190))
    defer mbTrans191.Close()
    _, err192 := mbTrans191.WriteString(arg190)
    if err192 != nil {
      Usage()
      return
    }
    factory193 := thrift.NewTJSONProtocolFactory()
    jsProt194 := factory193.GetProtocol(mbTrans191)
    argvalue5 := hbase.NewTPut()
    err195 := argvalue5.Read(jsProt194)
    if err195 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    fmt.Print(client.CheckAndPut(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "putMultiple":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "PutMultiple requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg197 := flag.Arg(2)
    mbTrans198 := thrift.NewTMemoryBufferLen(len(arg197))
    defer mbTrans198.Close()
    _, err199 := mbTrans198.WriteString(arg197)
    if err199 != nil { 
      Usage()
      return
    }
    factory200 := thrift.NewTJSONProtocolFactory()
    jsProt201 := factory200.GetProtocol(mbTrans198)
    containerStruct1 := hbase.NewTHBaseServicePutMultipleArgs()
    err202 := containerStruct1.ReadField2(jsProt201)
    if err202 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Tputs
    value1 := argvalue1
    fmt.Print(client.PutMultiple(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteSingle":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteSingle requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg204 := flag.Arg(2)
    mbTrans205 := thrift.NewTMemoryBufferLen(len(arg204))
    defer mbTrans205.Close()
    _, err206 := mbTrans205.WriteString(arg204)
    if err206 != nil {
      Usage()
      return
    }
    factory207 := thrift.NewTJSONProtocolFactory()
    jsProt208 := factory207.GetProtocol(mbTrans205)
    argvalue1 := hbase.NewTDelete()
    err209 := argvalue1.Read(jsProt208)
    if err209 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.DeleteSingle(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteMultiple":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteMultiple requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg211 := flag.Arg(2)
    mbTrans212 := thrift.NewTMemoryBufferLen(len(arg211))
    defer mbTrans212.Close()
    _, err213 := mbTrans212.WriteString(arg211)
    if err213 != nil { 
      Usage()
      return
    }
    factory214 := thrift.NewTJSONProtocolFactory()
    jsProt215 := factory214.GetProtocol(mbTrans212)
    containerStruct1 := hbase.NewTHBaseServiceDeleteMultipleArgs()
    err216 := containerStruct1.ReadField2(jsProt215)
    if err216 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Tdeletes
    value1 := argvalue1
    fmt.Print(client.DeleteMultiple(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "checkAndDelete":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "CheckAndDelete requires 6 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    arg222 := flag.Arg(6)
    mbTrans223 := thrift.NewTMemoryBufferLen(len(arg222))
    defer mbTrans223.Close()
    _, err224 := mbTrans223.WriteString(arg222)
    if err224 != nil {
      Usage()
      return
    }
    factory225 := thrift.NewTJSONProtocolFactory()
    jsProt226 := factory225.GetProtocol(mbTrans223)
    argvalue5 := hbase.NewTDelete()
    err227 := argvalue5.Read(jsProt226)
    if err227 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    fmt.Print(client.CheckAndDelete(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "increment":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Increment requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg229 := flag.Arg(2)
    mbTrans230 := thrift.NewTMemoryBufferLen(len(arg229))
    defer mbTrans230.Close()
    _, err231 := mbTrans230.WriteString(arg229)
    if err231 != nil {
      Usage()
      return
    }
    factory232 := thrift.NewTJSONProtocolFactory()
    jsProt233 := factory232.GetProtocol(mbTrans230)
    argvalue1 := hbase.NewTIncrement()
    err234 := argvalue1.Read(jsProt233)
    if err234 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Increment(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "append":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "Append requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg236 := flag.Arg(2)
    mbTrans237 := thrift.NewTMemoryBufferLen(len(arg236))
    defer mbTrans237.Close()
    _, err238 := mbTrans237.WriteString(arg236)
    if err238 != nil {
      Usage()
      return
    }
    factory239 := thrift.NewTJSONProtocolFactory()
    jsProt240 := factory239.GetProtocol(mbTrans237)
    argvalue1 := hbase.NewTAppend()
    err241 := argvalue1.Read(jsProt240)
    if err241 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.Append(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "openScanner":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "OpenScanner requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg243 := flag.Arg(2)
    mbTrans244 := thrift.NewTMemoryBufferLen(len(arg243))
    defer mbTrans244.Close()
    _, err245 := mbTrans244.WriteString(arg243)
    if err245 != nil {
      Usage()
      return
    }
    factory246 := thrift.NewTJSONProtocolFactory()
    jsProt247 := factory246.GetProtocol(mbTrans244)
    argvalue1 := hbase.NewTScan()
    err248 := argvalue1.Read(jsProt247)
    if err248 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.OpenScanner(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getScannerRows":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetScannerRows requires 2 args")
      flag.Usage()
    }
    tmp0, err249 := (strconv.Atoi(flag.Arg(1)))
    if err249 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err250 := (strconv.Atoi(flag.Arg(2)))
    if err250 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetScannerRows(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "closeScanner":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CloseScanner requires 1 args")
      flag.Usage()
    }
    tmp0, err251 := (strconv.Atoi(flag.Arg(1)))
    if err251 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.CloseScanner(context.Background(), value0))
    fmt.Print("\n")
    break
  case "mutateRow":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "MutateRow requires 2 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg253 := flag.Arg(2)
    mbTrans254 := thrift.NewTMemoryBufferLen(len(arg253))
    defer mbTrans254.Close()
    _, err255 := mbTrans254.WriteString(arg253)
    if err255 != nil {
      Usage()
      return
    }
    factory256 := thrift.NewTJSONProtocolFactory()
    jsProt257 := factory256.GetProtocol(mbTrans254)
    argvalue1 := hbase.NewTRowMutations()
    err258 := argvalue1.Read(jsProt257)
    if err258 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.MutateRow(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getScannerResults":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetScannerResults requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    arg260 := flag.Arg(2)
    mbTrans261 := thrift.NewTMemoryBufferLen(len(arg260))
    defer mbTrans261.Close()
    _, err262 := mbTrans261.WriteString(arg260)
    if err262 != nil {
      Usage()
      return
    }
    factory263 := thrift.NewTJSONProtocolFactory()
    jsProt264 := factory263.GetProtocol(mbTrans261)
    argvalue1 := hbase.NewTScan()
    err265 := argvalue1.Read(jsProt264)
    if err265 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err266 := (strconv.Atoi(flag.Arg(3)))
    if err266 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetScannerResults(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getRegionLocation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetRegionLocation requires 3 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.GetRegionLocation(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAllRegionLocations":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllRegionLocations requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.GetAllRegionLocations(context.Background(), value0))
    fmt.Print("\n")
    break
  case "checkAndMutate":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "CheckAndMutate requires 7 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    tmp4, err := (strconv.Atoi(flag.Arg(5)))
    if err != nil {
      Usage()
     return
    }
    argvalue4 := hbase.TCompareOperator(tmp4)
    value4 := argvalue4
    argvalue5 := []byte(flag.Arg(6))
    value5 := argvalue5
    arg276 := flag.Arg(7)
    mbTrans277 := thrift.NewTMemoryBufferLen(len(arg276))
    defer mbTrans277.Close()
    _, err278 := mbTrans277.WriteString(arg276)
    if err278 != nil {
      Usage()
      return
    }
    factory279 := thrift.NewTJSONProtocolFactory()
    jsProt280 := factory279.GetProtocol(mbTrans277)
    argvalue6 := hbase.NewTRowMutations()
    err281 := argvalue6.Read(jsProt280)
    if err281 != nil {
      Usage()
      return
    }
    value6 := argvalue6
    fmt.Print(client.CheckAndMutate(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "getTableDescriptor":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableDescriptor requires 1 args")
      flag.Usage()
    }
    arg282 := flag.Arg(1)
    mbTrans283 := thrift.NewTMemoryBufferLen(len(arg282))
    defer mbTrans283.Close()
    _, err284 := mbTrans283.WriteString(arg282)
    if err284 != nil {
      Usage()
      return
    }
    factory285 := thrift.NewTJSONProtocolFactory()
    jsProt286 := factory285.GetProtocol(mbTrans283)
    argvalue0 := hbase.NewTTableName()
    err287 := argvalue0.Read(jsProt286)
    if err287 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTableDescriptor(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getTableDescriptors":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableDescriptors requires 1 args")
      flag.Usage()
    }
    arg288 := flag.Arg(1)
    mbTrans289 := thrift.NewTMemoryBufferLen(len(arg288))
    defer mbTrans289.Close()
    _, err290 := mbTrans289.WriteString(arg288)
    if err290 != nil { 
      Usage()
      return
    }
    factory291 := thrift.NewTJSONProtocolFactory()
    jsProt292 := factory291.GetProtocol(mbTrans289)
    containerStruct0 := hbase.NewTHBaseServiceGetTableDescriptorsArgs()
    err293 := containerStruct0.ReadField1(jsProt292)
    if err293 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Tables
    value0 := argvalue0
    fmt.Print(client.GetTableDescriptors(context.Background(), value0))
    fmt.Print("\n")
    break
  case "tableExists":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TableExists requires 1 args")
      flag.Usage()
    }
    arg294 := flag.Arg(1)
    mbTrans295 := thrift.NewTMemoryBufferLen(len(arg294))
    defer mbTrans295.Close()
    _, err296 := mbTrans295.WriteString(arg294)
    if err296 != nil {
      Usage()
      return
    }
    factory297 := thrift.NewTJSONProtocolFactory()
    jsProt298 := factory297.GetProtocol(mbTrans295)
    argvalue0 := hbase.NewTTableName()
    err299 := argvalue0.Read(jsProt298)
    if err299 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TableExists(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getTableDescriptorsByPattern":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTableDescriptorsByPattern requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.GetTableDescriptorsByPattern(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getTableDescriptorsByNamespace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableDescriptorsByNamespace requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetTableDescriptorsByNamespace(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getTableNamesByPattern":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTableNamesByPattern requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.GetTableNamesByPattern(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getTableNamesByNamespace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTableNamesByNamespace requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetTableNamesByNamespace(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createTable":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateTable requires 2 args")
      flag.Usage()
    }
    arg306 := flag.Arg(1)
    mbTrans307 := thrift.NewTMemoryBufferLen(len(arg306))
    defer mbTrans307.Close()
    _, err308 := mbTrans307.WriteString(arg306)
    if err308 != nil {
      Usage()
      return
    }
    factory309 := thrift.NewTJSONProtocolFactory()
    jsProt310 := factory309.GetProtocol(mbTrans307)
    argvalue0 := hbase.NewTTableDescriptor()
    err311 := argvalue0.Read(jsProt310)
    if err311 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg312 := flag.Arg(2)
    mbTrans313 := thrift.NewTMemoryBufferLen(len(arg312))
    defer mbTrans313.Close()
    _, err314 := mbTrans313.WriteString(arg312)
    if err314 != nil { 
      Usage()
      return
    }
    factory315 := thrift.NewTJSONProtocolFactory()
    jsProt316 := factory315.GetProtocol(mbTrans313)
    containerStruct1 := hbase.NewTHBaseServiceCreateTableArgs()
    err317 := containerStruct1.ReadField2(jsProt316)
    if err317 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.SplitKeys
    value1 := argvalue1
    fmt.Print(client.CreateTable(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteTable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteTable requires 1 args")
      flag.Usage()
    }
    arg318 := flag.Arg(1)
    mbTrans319 := thrift.NewTMemoryBufferLen(len(arg318))
    defer mbTrans319.Close()
    _, err320 := mbTrans319.WriteString(arg318)
    if err320 != nil {
      Usage()
      return
    }
    factory321 := thrift.NewTJSONProtocolFactory()
    jsProt322 := factory321.GetProtocol(mbTrans319)
    argvalue0 := hbase.NewTTableName()
    err323 := argvalue0.Read(jsProt322)
    if err323 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteTable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "truncateTable":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "TruncateTable requires 2 args")
      flag.Usage()
    }
    arg324 := flag.Arg(1)
    mbTrans325 := thrift.NewTMemoryBufferLen(len(arg324))
    defer mbTrans325.Close()
    _, err326 := mbTrans325.WriteString(arg324)
    if err326 != nil {
      Usage()
      return
    }
    factory327 := thrift.NewTJSONProtocolFactory()
    jsProt328 := factory327.GetProtocol(mbTrans325)
    argvalue0 := hbase.NewTTableName()
    err329 := argvalue0.Read(jsProt328)
    if err329 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.TruncateTable(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "enableTable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "EnableTable requires 1 args")
      flag.Usage()
    }
    arg331 := flag.Arg(1)
    mbTrans332 := thrift.NewTMemoryBufferLen(len(arg331))
    defer mbTrans332.Close()
    _, err333 := mbTrans332.WriteString(arg331)
    if err333 != nil {
      Usage()
      return
    }
    factory334 := thrift.NewTJSONProtocolFactory()
    jsProt335 := factory334.GetProtocol(mbTrans332)
    argvalue0 := hbase.NewTTableName()
    err336 := argvalue0.Read(jsProt335)
    if err336 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.EnableTable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "disableTable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DisableTable requires 1 args")
      flag.Usage()
    }
    arg337 := flag.Arg(1)
    mbTrans338 := thrift.NewTMemoryBufferLen(len(arg337))
    defer mbTrans338.Close()
    _, err339 := mbTrans338.WriteString(arg337)
    if err339 != nil {
      Usage()
      return
    }
    factory340 := thrift.NewTJSONProtocolFactory()
    jsProt341 := factory340.GetProtocol(mbTrans338)
    argvalue0 := hbase.NewTTableName()
    err342 := argvalue0.Read(jsProt341)
    if err342 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DisableTable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isTableEnabled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsTableEnabled requires 1 args")
      flag.Usage()
    }
    arg343 := flag.Arg(1)
    mbTrans344 := thrift.NewTMemoryBufferLen(len(arg343))
    defer mbTrans344.Close()
    _, err345 := mbTrans344.WriteString(arg343)
    if err345 != nil {
      Usage()
      return
    }
    factory346 := thrift.NewTJSONProtocolFactory()
    jsProt347 := factory346.GetProtocol(mbTrans344)
    argvalue0 := hbase.NewTTableName()
    err348 := argvalue0.Read(jsProt347)
    if err348 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsTableEnabled(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isTableDisabled":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsTableDisabled requires 1 args")
      flag.Usage()
    }
    arg349 := flag.Arg(1)
    mbTrans350 := thrift.NewTMemoryBufferLen(len(arg349))
    defer mbTrans350.Close()
    _, err351 := mbTrans350.WriteString(arg349)
    if err351 != nil {
      Usage()
      return
    }
    factory352 := thrift.NewTJSONProtocolFactory()
    jsProt353 := factory352.GetProtocol(mbTrans350)
    argvalue0 := hbase.NewTTableName()
    err354 := argvalue0.Read(jsProt353)
    if err354 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsTableDisabled(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isTableAvailable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsTableAvailable requires 1 args")
      flag.Usage()
    }
    arg355 := flag.Arg(1)
    mbTrans356 := thrift.NewTMemoryBufferLen(len(arg355))
    defer mbTrans356.Close()
    _, err357 := mbTrans356.WriteString(arg355)
    if err357 != nil {
      Usage()
      return
    }
    factory358 := thrift.NewTJSONProtocolFactory()
    jsProt359 := factory358.GetProtocol(mbTrans356)
    argvalue0 := hbase.NewTTableName()
    err360 := argvalue0.Read(jsProt359)
    if err360 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.IsTableAvailable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isTableAvailableWithSplit":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "IsTableAvailableWithSplit requires 2 args")
      flag.Usage()
    }
    arg361 := flag.Arg(1)
    mbTrans362 := thrift.NewTMemoryBufferLen(len(arg361))
    defer mbTrans362.Close()
    _, err363 := mbTrans362.WriteString(arg361)
    if err363 != nil {
      Usage()
      return
    }
    factory364 := thrift.NewTJSONProtocolFactory()
    jsProt365 := factory364.GetProtocol(mbTrans362)
    argvalue0 := hbase.NewTTableName()
    err366 := argvalue0.Read(jsProt365)
    if err366 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg367 := flag.Arg(2)
    mbTrans368 := thrift.NewTMemoryBufferLen(len(arg367))
    defer mbTrans368.Close()
    _, err369 := mbTrans368.WriteString(arg367)
    if err369 != nil { 
      Usage()
      return
    }
    factory370 := thrift.NewTJSONProtocolFactory()
    jsProt371 := factory370.GetProtocol(mbTrans368)
    containerStruct1 := hbase.NewTHBaseServiceIsTableAvailableWithSplitArgs()
    err372 := containerStruct1.ReadField2(jsProt371)
    if err372 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.SplitKeys
    value1 := argvalue1
    fmt.Print(client.IsTableAvailableWithSplit(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "addColumnFamily":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddColumnFamily requires 2 args")
      flag.Usage()
    }
    arg373 := flag.Arg(1)
    mbTrans374 := thrift.NewTMemoryBufferLen(len(arg373))
    defer mbTrans374.Close()
    _, err375 := mbTrans374.WriteString(arg373)
    if err375 != nil {
      Usage()
      return
    }
    factory376 := thrift.NewTJSONProtocolFactory()
    jsProt377 := factory376.GetProtocol(mbTrans374)
    argvalue0 := hbase.NewTTableName()
    err378 := argvalue0.Read(jsProt377)
    if err378 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg379 := flag.Arg(2)
    mbTrans380 := thrift.NewTMemoryBufferLen(len(arg379))
    defer mbTrans380.Close()
    _, err381 := mbTrans380.WriteString(arg379)
    if err381 != nil {
      Usage()
      return
    }
    factory382 := thrift.NewTJSONProtocolFactory()
    jsProt383 := factory382.GetProtocol(mbTrans380)
    argvalue1 := hbase.NewTColumnFamilyDescriptor()
    err384 := argvalue1.Read(jsProt383)
    if err384 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AddColumnFamily(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteColumnFamily":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteColumnFamily requires 2 args")
      flag.Usage()
    }
    arg385 := flag.Arg(1)
    mbTrans386 := thrift.NewTMemoryBufferLen(len(arg385))
    defer mbTrans386.Close()
    _, err387 := mbTrans386.WriteString(arg385)
    if err387 != nil {
      Usage()
      return
    }
    factory388 := thrift.NewTJSONProtocolFactory()
    jsProt389 := factory388.GetProtocol(mbTrans386)
    argvalue0 := hbase.NewTTableName()
    err390 := argvalue0.Read(jsProt389)
    if err390 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.DeleteColumnFamily(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "modifyColumnFamily":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ModifyColumnFamily requires 2 args")
      flag.Usage()
    }
    arg392 := flag.Arg(1)
    mbTrans393 := thrift.NewTMemoryBufferLen(len(arg392))
    defer mbTrans393.Close()
    _, err394 := mbTrans393.WriteString(arg392)
    if err394 != nil {
      Usage()
      return
    }
    factory395 := thrift.NewTJSONProtocolFactory()
    jsProt396 := factory395.GetProtocol(mbTrans393)
    argvalue0 := hbase.NewTTableName()
    err397 := argvalue0.Read(jsProt396)
    if err397 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg398 := flag.Arg(2)
    mbTrans399 := thrift.NewTMemoryBufferLen(len(arg398))
    defer mbTrans399.Close()
    _, err400 := mbTrans399.WriteString(arg398)
    if err400 != nil {
      Usage()
      return
    }
    factory401 := thrift.NewTJSONProtocolFactory()
    jsProt402 := factory401.GetProtocol(mbTrans399)
    argvalue1 := hbase.NewTColumnFamilyDescriptor()
    err403 := argvalue1.Read(jsProt402)
    if err403 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ModifyColumnFamily(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "modifyTable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ModifyTable requires 1 args")
      flag.Usage()
    }
    arg404 := flag.Arg(1)
    mbTrans405 := thrift.NewTMemoryBufferLen(len(arg404))
    defer mbTrans405.Close()
    _, err406 := mbTrans405.WriteString(arg404)
    if err406 != nil {
      Usage()
      return
    }
    factory407 := thrift.NewTJSONProtocolFactory()
    jsProt408 := factory407.GetProtocol(mbTrans405)
    argvalue0 := hbase.NewTTableDescriptor()
    err409 := argvalue0.Read(jsProt408)
    if err409 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ModifyTable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createNamespace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateNamespace requires 1 args")
      flag.Usage()
    }
    arg410 := flag.Arg(1)
    mbTrans411 := thrift.NewTMemoryBufferLen(len(arg410))
    defer mbTrans411.Close()
    _, err412 := mbTrans411.WriteString(arg410)
    if err412 != nil {
      Usage()
      return
    }
    factory413 := thrift.NewTJSONProtocolFactory()
    jsProt414 := factory413.GetProtocol(mbTrans411)
    argvalue0 := hbase.NewTNamespaceDescriptor()
    err415 := argvalue0.Read(jsProt414)
    if err415 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateNamespace(context.Background(), value0))
    fmt.Print("\n")
    break
  case "modifyNamespace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ModifyNamespace requires 1 args")
      flag.Usage()
    }
    arg416 := flag.Arg(1)
    mbTrans417 := thrift.NewTMemoryBufferLen(len(arg416))
    defer mbTrans417.Close()
    _, err418 := mbTrans417.WriteString(arg416)
    if err418 != nil {
      Usage()
      return
    }
    factory419 := thrift.NewTJSONProtocolFactory()
    jsProt420 := factory419.GetProtocol(mbTrans417)
    argvalue0 := hbase.NewTNamespaceDescriptor()
    err421 := argvalue0.Read(jsProt420)
    if err421 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ModifyNamespace(context.Background(), value0))
    fmt.Print("\n")
    break
  case "deleteNamespace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteNamespace requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DeleteNamespace(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getNamespaceDescriptor":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetNamespaceDescriptor requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetNamespaceDescriptor(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listNamespaceDescriptors":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ListNamespaceDescriptors requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ListNamespaceDescriptors(context.Background()))
    fmt.Print("\n")
    break
  case "listNamespaces":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ListNamespaces requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ListNamespaces(context.Background()))
    fmt.Print("\n")
    break
  case "getThriftServerType":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetThriftServerType requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetThriftServerType(context.Background()))
    fmt.Print("\n")
    break
  case "getClusterId":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetClusterId requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetClusterId(context.Background()))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
